apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: gh fetch
  labels:
    app: cbom.ai
spec:
  framework: code
  mode: local
  description: Fetch .java files via GitHub API
  code: |
    import requests
    import sys

    owner, repo = "Mastercard", "client-encryption-java"
    branch = "main"

    url = f"https://api.github.com/repos/{owner}/{repo}/git/trees/{branch}?recursive=1"
    response = requests.get(url)
    response.raise_for_status()
    tree = response.json().get("tree", [])

    java_urls = [
        f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{item['path']}"
        for item in tree if item["path"].endswith(".java")
    ]

    output['urls'] = java_urls

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: identify post-quantum
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    given a single java file, find every use of post-quantum-vulnerable crypto algorithms and output its line number, the function name and the full source line
  instructions: |
    You are a code-analysis assistant.  
    INPUT: a Java source file as plain text.  
    TASK: Identify every use of post-quantum-vulnerable cryptography. That includes:
      1. **Explicit algorithms** in strings: e.g. “AES”, “RSA”, “DSA”, “3DES”, “SHA-1”, etc.
      2. **API calls or imports** from Java’s crypto packages: any reference to 
        - `javax.crypto.*` (e.g. `Cipher.getInstance`, `Mac.getInstance`)  
        - `java.security.*` (e.g. `KeyPairGenerator.getInstance`, `MessageDigest.getInstance`)  
        - Third-party libs like BouncyCastle (`org.bouncycastle.*`)  
      3. **Cryptographic classes** usage: e.g. `KeyPairGenerator`, `Certificate`, `SecretKeySpec`, `Signature`, etc.

    For **each** occurrence, produce an object with:
      • `algorithm`: the exact string or class/API name (e.g. `"AES/CBC/PKCS5Padding"` or `"Cipher.getInstance"`).  
      • `line`: 1-based line number.  
      • `snippet`: the entire source line.

    **REQUIREMENTS**  
    - Output **only** one JSON array of objects (empty `[]` if no matches).  
    - **Never** output `None`, prose, or explanations.  
    - If you’re unsure, **include** the occurrence (safe over silent).

    **EXAMPLE OUTPUT**  
    ```json
    [
      {
        "algorithm": "Cipher.getInstance",
        "line": 27,
        "snippet": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");"
      },
      {
        "algorithm": "KeyPairGenerator.getInstance",
        "line": 54,
        "snippet": "KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");"
      },
      {
        "algorithm": "Certificate",
        "line": 103,
        "snippet": "Certificate cert = loadCertificate(...);"
      }
    ]
  mode: remote
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: gh reader
  labels:
    app: cbom.ai
spec:
  framework: code
  mode: local
  description: Fetch raw file contents from a GitHub URL
  code: |
    import requests
    url = "https://raw.githubusercontent.com/Mastercard/client-encryption-java/main/src/main/java/com/mastercard/developer/encryption/EncryptionConfig.java"
    response = requests.get(url)
    response.raise_for_status()
    output["content"] = response.text

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: component creator
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    cbom assembler agent
  instructions: |
    You are the **Component Agent** for CBOM.ai.

    **Input:** A JSON array of objects, each containing:
      - "algorithm" (string)
      - "line" (number)
      - "snippet" (string)

    **Task:** Produce a JSON array of **component objects** in the format below.
    For each unique algorithm value in the input, create one component entry:

      {
        "name": <algorithm>,
        "type": "cryptographic-asset",
        "bom-ref": "<UUID>",
        "evidence": {
          "occurrences": [
            {
              "location": "<file-location-placeholder>",
              "line": <line>,
              "offset": <offset-placeholder>,
              "additionalContext": <snippet>
            },
            ...
          ]
        },
        "cryptoProperties": {
          "assetType": "algorithm",
          "algorithmProperties": {
            "primitive": "<primitive-placeholder>",
            "cryptoFunctions": ["<function-placeholder>"],
            "parameterSetIdentifier": "<param-placeholder>"
          }
        }
      }

    **Notes:**
    - Use a unique UUID string for each "bom-ref".
    - Any missing data (e.g., file location, offset, primitive) may be left as placeholders.
    - Output **only** the JSON array (no extra text), formatted in a code block.
    - If input is empty (`[]`), output `[]`.
  mode: remote
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: BOM Assembler
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    cbom assembler agent
  instructions: |
    You are the **BOM Assembler** agent for CBOM.ai.

    **Input:** A JSON array of CycloneDX-style component objects.

    **Task:** Produce a complete CycloneDX BOM JSON document with a hardcoded header and the provided components. Use the following template, substituting in the input array:

    ```json
    {
      "version": 1,
      "metadata": {
        "tools": {"services": [{
          "name": "Sonar Cryptography Plugin",
          "version": "1.3.2",
          "provider": {"name": "IBM"}
        }]},
        "timestamp":  "placeholder",
        "properties": [
          {"name":"git-url",    "value":"https://github.com/Mastercard/client-encryption-java"},
          {"name":"git-branch", "value":"main"},
          {"name":"commit",     "value":"placeholder"},
          {"name":"purl",       "value":"pkg:github/Mastercard/client-encryption-java"}
        ]
      },
      "$schema": "https://raw.githubusercontent.com/CycloneDX/specification/1.6/schema/bom-1.6.schema.json",
      "bomFormat": "CycloneDX",
      "components": {{components}},
      "specVersion": "1.6",
      "dependencies": [],
      "serialNumber": "placeholder"
    }
    ```

    - Insert the input array in place of `{{components}}`.
    - Leave dependencies as an empty array for now.
    - You do not need to replaced "placeholder" for now, you can just keep it as is.
    - **Output only** the final JSON document in a code block, no extra text.
    - **NOTE**: the header is always the same, so you can directly hardcode it in your output.
  mode: remote
  tools:
    - LLM
    
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: score
  labels: 
    app: test-example
    custom_agent: scoring_agent
spec:
  model: qwen3:latest
  framework: custom
  mode: remote
  description: gets score, relevance/hallucination using defined model
  instructions: evaluates the response using Opik

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: fixer-agent
  labels:
    app: cbom-demo
spec:
  framework: code
  mode: local
  description: Generates a git patch based on CBOM
  code: |
    import os
    import json
    import re
    import sys

    cbom_path = "/Users/gliu/Desktop/work/maestro/demos/workflows/cbom.ai/example-cbom.json"
    workspace_dir = "/Users/gliu/Desktop/work/maestro/demos/workflows/cbom.ai/workspace"
    patch_path = "/Users/gliu/Desktop/work/maestro/demos/workflows/cbom.ai/workspace/patch"

    with open(cbom_path) as f:
        cbom = json.load(f)

    github_token = os.getenv("GITHUB_TOKEN")
    email = "patcher@cbom.ai"
    name = "Fixer Agent"

    props = {p["name"]: p["value"] for p in cbom["metadata"]["properties"]}
    repo_url = props["git-url"]
    match = re.search(r"github\.com\/([^\/]+)\/([^\/]+)", repo_url)
    org, repo = match.group(1), match.group(2)

    findings = []
    for component in cbom.get("components", []):
        algo = component.get("cryptoProperties", {}).get("algorithmProperties", {})
        if algo.get("parameterSetIdentifier") == "128":
            for occ in component.get("evidence", {}).get("occurrences", []):
                findings.append({"filename": occ["location"], "remediation": "KEYLEN01"})

    os.system(f"rm -fr {workspace_dir} && mkdir -p {workspace_dir} && cd {workspace_dir} && git clone https://{github_token}@github.com/{org}/{repo}.git repo && cd repo && git checkout -b staging")
    os.system(f"cd {workspace_dir}/repo && git config user.email {email} && git config user.name {name} >../out 2>&1")

    for f in findings:
        filename = f["filename"]
        sed_flag = "-i ''" if sys.platform == "darwin" else "-i"
        os.system(f"cd {workspace_dir}/repo && sed {sed_flag} 's/128/256/g' {filename}")

    os.system(f"cd {workspace_dir}/repo && git add . > ../out 2>&1")
    os.system(f"cd {workspace_dir}/repo && git commit -m 'CBOM patch applied' > ../out 2>&1")
    os.system(f"cd {workspace_dir}/repo && git format-patch --stdout -1 HEAD > {patch_path} 2>&1")

    with open(patch_path, "r") as f:
        patch = f.read()

    os.system(f"cd {workspace_dir} && rm -fr repo")
    print("✅ Patch updated successfully.")

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: patcher-agent
  labels:
    app: cbom-demo
spec:
  framework: code
  mode: local
  description: Apply patch and create GitHub PR
  code: |
    import os
    import random
    import re

    workspace_dir = "/Users/gliu/Desktop/work/maestro/demos/workflows/cbom.ai/workspace"
    patch_path = "/Users/gliu/Desktop/work/maestro/demos/workflows/cbom.ai/workspace/patch"

    with open(patch_path, "r") as f:
        patch = f.read()

    repo_url = "https://github.com/george-lhj/client-encryption-java"
    github_token = os.getenv("GITHUB_TOKEN")
    email = "patcher@cbom.ai"
    name = "Patcher Bot"

    match = re.search(r"github\.com\/([^\/]+)\/([^\/]+)", repo_url)
    if not match:
        raise ValueError(f"Could not parse org/repo from URL: {repo_url}")

    org, repo = match.group(1), match.group(2)
    repobase = f"{org}/{repo}"
    branch = f"remediation_{random.randint(1000, 9999)}"

    os.system(f"rm -fr {workspace_dir} && mkdir -p {workspace_dir} && cd {workspace_dir} && git clone https://{github_token}@github.com/{org}/{repo}.git repo && cd repo && git checkout -b {branch}")
    os.system(f"cd {workspace_dir}/repo && git config user.email {email} && git config user.name {name}")

    patchfile_path = os.path.join(workspace_dir, "patchfile")
    with open(patchfile_path, "w") as f:
        f.write(patch)

    os.system(f"cd {workspace_dir}/repo && git am < ../patchfile")
    os.system(f"cd {workspace_dir}/repo && git push --force --set-upstream origin {branch}")
    os.environ["GH_TOKEN"] = github_token
    os.system(f"cd {workspace_dir}/repo && gh repo set-default {repobase}")
    os.system(f"cd {workspace_dir}/repo && gh pr create --title 'CBOM Fix' --body 'Auto-applied fix from patch' --base main")

    os.system(f"cd {workspace_dir} && rm -fr repo")
    print(f"✅ Patch applied and PR created on branch: {branch}")

